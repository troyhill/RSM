% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extractEDEN.R
\name{getEDENbyROI}
\alias{getEDENbyROI}
\title{getEDENbyROI}
\usage{
getEDENbyROI(targetLocations, targetLocationNames, dateRange, needEDEN = TRUE)
}
\arguments{
\item{targetLocations}{locations to extract data from; must be class SpatialPointsDataFrame or SpatialPolygonsDataFrame}

\item{targetLocationNames}{option to specify the name of target locations (e.g., pts$gage)}

\item{dateRange}{Date range for which to download EDEN data}

\item{needEDEN}{whether EDEN data is needed. either TRUE, or the name of the list of EDEN data generated from lapply(dateRange, fireHydro::getEDEN). Specifically, object is a list of lists with (1) a date (YYYYMMDD) and (2) EDEN data (sf multipolygon object).}
}
\value{
a dataframe formatted identically to the traceDataLong output from extractSimData()
}
\description{
This function extracts EDEN data for spatial locations of interest. This function can take a very long time depending on the number of regions-of-interest and their size, and if EDEN data is downloaded within the function call. NOTE: This is based on availability of data on the home page of EDEN. If data aren't there, they aren't accessible for this code.
}
\examples{

\dontrun{
load("L:/Restoration Assessments/Non CERP Projects/COP/Position_analysis/data/data_indicatorRegions_20200204.RData")

IR_pattern <- "WCA-1"
dateList <- format(seq.Date(from = as.Date("20200101", format = "\%Y\%m\%d"), 
            to = as.Date("20200109", format = "\%Y\%m\%d"), by = "day"), format = "\%Y\%m\%d")

### assign cluster categories to trace data
sim_means <- polyDat$traceDataLong[!is.na(polyDat$traceDataLong$value), ] 
### add grouping variable 
sim_means$cluster <- sim_clusters[match(sim_means$simulation, sim_clusters$simulation), 1]

ROIs <- IRMap[[2]][grepl(IRMap[[2]]$NAME, pattern = IR_pattern), ]
targetLocationNames <- as.character(IRMap[[2]]$NAME[grepl(IRMap[[2]]$NAME, 
                        pattern = IR_pattern)])

### best practice: pull EDEN data separately  so it's retained in the global environment
EDEN_data <- lapply(dateList, fireHydro::getEDEN)
EDEN_by_IR <- getEDENbyROI(targetLocations = ROIs,
                           targetLocationNames = targetLocationNames,
                           dateRange = dateList, 
                           needEDEN = EDEN_data)
t.plot <- tracePlot(namesMatching = IR_pattern, simMeansObject = sim_means)

t.plot

t.plot + geom_line(data = EDEN_by_IR, mapping = aes(x = date, y = ave), size = 1.5)

### Because EDEN data are now present in the working environment, 
### it's trivial to repeat this for a new region of interest
IR_pattern <- "WCA-3A North Central"
ROIs <- IRMap[[2]][grepl(IRMap[[2]]$NAME, pattern = IR_pattern), ]
targetLocationNames <- as.character(IRMap[[2]]$NAME[grepl(IRMap[[2]]$NAME, 
                                    pattern = IR_pattern)])

EDEN_by_IR <- getEDENbyROI(targetLocations = ROIs,
              targetLocationNames = targetLocationNames,
              dateRange = dateList, 
              needEDEN = EDEN_data)
              
tracePlot(namesMatching = IR_pattern, simMeansObject = sim_means) + 
   geom_line(data = EDEN_by_IR, mapping = aes(x = date, y = ave), size = 1.5)
}

}
